import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Bank extends Contract {
    public static final String[] BINARY_ARRAY = {};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","00000000000000028152600401602060405180830381600087803b158015610a6b57600080fd5b505af1158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aa391908101906113f4565b604051908082528060200260200182016040528015610adc57816020015b610ac9611150565b815260200190600190039081610ac15790505b509250600091505b8373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b4857600080fd5b505af1158015610b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8091908101906113f4565b82121561113f578373ffffffffffffffffffffffffffffffffffffffff16633dd2b614836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bdc91906118a5565b602060405180830381600087803b158015610bf657600080fd5b505af1158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c2e91908101906113a2565b90508073ffffffffffffffffffffffffffffffffffffffff166307afbf3a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c8390611975565b602060405180830381600087803b158015610c9d57600080fd5b505af1158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cd59190810190611327565b8383815181101515610ce357fe5b906020019060200201516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166307afbf3a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d76906119c3565b602060405180830381600087803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dc89190810190611327565b8383815181101515610dd657fe5b906020019060200201516020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e6990611a94565b602060405180830381600087803b158015610e8357600080fd5b505af1158015610e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ebb91908101906113f4565b8383815181101515610ec957fe5b9060200190602002015160400181815250508073ffffffffffffffffffffffffffffffffffffffff1663df7427af6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f2e90611b37565b602060405180830381600087803b158015610f4857600080fd5b505af1158015610f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f809190810190611487565b8383815181101515610f8e57fe5b9060200190602002015160600181815250508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ff390611ae2565b600060405180830381600087803b15801561100d57600080fd5b505af1158015611021573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061104a919081019061141d565b838381518110151561105857fe5b90602001906020020151608001819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110bc90611a3f565b600060405180830381600087803b1580156110d657600080fd5b505af11580156110ea573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611113919081019061141d565b838381518110151561112157fe5b9060200190602002015160a001819052508180600101925050610ae4565b888397509750505050505050915091565b60c060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160608152602001606081525090565b60006111bf8235611c78565b905092915050565b60006111d38251611c78565b905092915050565b60006111e78251611c98565b905092915050565b60006111fb8251611caa565b905092915050565b600061120f8251611cbc565b905092915050565b60006112238251611cce565b905092915050565b60006112378235611ce0565b905092915050565b600061124b8251611ce0565b905092915050565b600082601f830112151561126657600080fd5b813561127961127482611bdd565b611bb0565b9150808252602083016020830185838301111561129557600080fd5b6112a0838284611d06565b50505092915050565b600082601f83011215156112bc57600080fd5b81516112cf6112ca82611bdd565b611bb0565b915080825260208301602083018583830111156112eb57600080fd5b6112f6838284611d15565b50505092915050565b600061130b8235611cea565b905092915050565b600061131f8251611cea565b905092915050565b60006020828403121561133957600080fd5b6000611347848285016111c7565b91505092915050565b60006020828403121561136257600080fd5b6000611370848285016111db565b91505092915050565b60006020828403121561138b57600080fd5b6000611399848285016111ef565b91505092915050565b6000602082840312156113b457600080fd5b60006113c284828501611203565b91505092915050565b6000602082840312156113dd57600080fd5b60006113eb84828501611217565b91505092915050565b60006020828403121561140657600080fd5b60006114148482850161123f565b91505092915050565b60006020828403121561142f57600080fd5b600082015167ffffffffffffffff81111561144957600080fd5b611455848285016112a9565b91505092915050565b60006020828403121561147057600080fd5b600061147e848285016112ff565b91505092915050565b60006020828403121561149957600080fd5b60006114a784828501611313565b91505092915050565b600080600080600080600060e0888a0312156114cb57600080fd5b60006114d98a828b016112ff565b97505060206114ea8a828b016111b3565b96505060406114fb8a828b016111b3565b955050606061150c8a828b0161122b565b945050608061151d8a828b016112ff565b93505060a088013567ffffffffffffffff81111561153a57600080fd5b6115468a828b01611253565b92505060c088013567ffffffffffffffff81111561156357600080fd5b61156f8a828b01611253565b91505092959891949750929550565b61158781611c44565b82525050565b600061159882611c16565b808452602084019350836020820285016115b185611c09565b60005b848110156115ea5783830388526115cc838351611806565b92506115d782611c37565b91506020880197506001810190506115b4565b508196508694505050505092915050565b61160481611cf4565b82525050565b61161381611c64565b82525050565b600061162482611c2c565b808452611638816020860160208601611d15565b61164181611d48565b602085010191505092915050565b600061165a82611c21565b80845261166e816020860160208601611d15565b61167781611d48565b602085010191505092915050565b6000600682527f53656e64657200000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f52656365697665720000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f50726f6a656374494400000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f72656d61726b00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f6d6f6e65790000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f5472616e736665724944000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f54696d657374616d7000000000000000000000000000000000000000000000006020830152604082019050919050565b600060c08301600083015161181e600086018261157e565b506020830151611831602086018261157e565b506040830151611844604086018261160a565b5060608301516118576060860182611896565b506080830151848203608086015261186f828261164f565b91505060a083015184820360a0860152611889828261164f565b9150508091505092915050565b61189f81611c6e565b82525050565b60006020820190506118ba600083018461160a565b92915050565b600060208201905081810360008301526118da818461164f565b905092915050565b60006101008201905081810360008301526118fd818b61164f565b905061190c602083018a611896565b611919604083018961157e565b611926606083018861157e565b611933608083018761160a565b61194060a0830186611896565b81810360c08301526119528185611619565b905081810360e08301526119668184611619565b90509998505050505050505050565b6000602082019050818103600083015261198e81611685565b9050919050565b600060408201905081810360008301526119ae81611685565b90506119bd602083018461157e565b92915050565b600060208201905081810360008301526119dc816116bc565b9050919050565b600060408201905081810360008301526119fc816116bc565b9050611a0b602083018461157e565b92915050565b60006040820190508181036000830152611a2a816116f3565b9050611a396020830184611896565b92915050565b6000602082","0190508181036000830152611a588161172a565b9050919050565b60006040820190508181036000830152611a788161172a565b90508181036020830152611a8c8184611619565b905092915050565b60006020820190508181036000830152611aad81611761565b9050919050565b60006040820190508181036000830152611acd81611761565b9050611adc6020830184611896565b92915050565b60006020820190508181036000830152611afb81611798565b9050919050565b60006040820190508181036000830152611b1b81611798565b90508181036020830152611b2f8184611619565b905092915050565b60006020820190508181036000830152611b50816117cf565b9050919050565b6000604082019050611b6c6000830185611896565b8181036020830152611b7e818461158d565b90509392505050565b6000604082019050611b9c6000830185611896565b611ba960208301846115fb565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715611bd357600080fd5b8060405250919050565b600067ffffffffffffffff821115611bf457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ca382611c44565b9050919050565b6000611cb582611c44565b9050919050565b6000611cc782611c44565b9050919050565b6000611cd982611c44565b9050919050565b6000819050919050565b6000819050919050565b6000611cff82611c44565b9050919050565b82818337600083830152505050565b60005b83811015611d33578082015181840152602081019050611d18565b83811115611d42576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820b772eefb14fedaa0dd0445e960b0594567f4afd83525e856c47e806c49e3eccf6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"bank_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"name\":\"Sender\",\"type\":\"address\"},{\"name\":\"Receiver\",\"type\":\"address\"},{\"name\":\"money\",\"type\":\"int256\"},{\"name\":\"Timestamp\",\"type\":\"uint256\"},{\"name\":\"TransferID\",\"type\":\"string\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bank_id\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"Sender\",\"type\":\"address\"},{\"name\":\"Receiver\",\"type\":\"address\"},{\"name\":\"money\",\"type\":\"int256\"},{\"name\":\"Timestamp\",\"type\":\"uint256\"},{\"name\":\"TransferID\",\"type\":\"string\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"Timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TransferID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"insertTable\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BANK_NAME = "bank_name";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_BANK_ID = "bank_id";

    public static final String FUNC_SELECT = "select";

    public static final Event INSERTTABLE_EVENT = new Event("insertTable", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Bank(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String bank_name() throws ContractException {
        final Function function = new Function(FUNC_BANK_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt insert(BigInteger ProjectID, String Sender, String Receiver, BigInteger money, BigInteger Timestamp, String TransferID, String remark) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(Sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(Receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Timestamp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(TransferID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(BigInteger ProjectID, String Sender, String Receiver, BigInteger money, BigInteger Timestamp, String TransferID, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(Sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(Receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Timestamp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(TransferID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(BigInteger ProjectID, String Sender, String Receiver, BigInteger money, BigInteger Timestamp, String TransferID, String remark) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(Sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(Receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Timestamp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(TransferID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue()
                );
    }

    public String bank_id() throws ContractException {
        final Function function = new Function(FUNC_BANK_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple2<BigInteger, List<Struct0>> select(BigInteger ProjectID) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Struct0>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, List<Struct0>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Struct0>) results.get(1).getValue()));
    }

    public List<InsertTableEventResponse> getInsertTableEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTTABLE_EVENT, transactionReceipt);
        ArrayList<InsertTableEventResponse> responses = new ArrayList<InsertTableEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertTableEventResponse typedResponse = new InsertTableEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ProjectID = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.Sender = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.Receiver = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.Timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.TransferID = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.remark = (String) eventValues.getNonIndexedValues().get(7).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertTableEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTTABLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertTableEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTTABLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Bank load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Bank(contractAddress, client, credential);
    }

    public static Bank deploy(Client client, CryptoKeyPair credential, String name, String id) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)));
        return deploy(Bank.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class Struct0 extends DynamicStruct {
        public String Sender;

        public String Receiver;

        public BigInteger money;

        public BigInteger Timestamp;

        public String TransferID;

        public String remark;

        public Struct0(Address Sender, Address Receiver, Int256 money, Uint256 Timestamp, Utf8String TransferID, Utf8String remark) {
            super(Sender,Receiver,money,Timestamp,TransferID,remark);
            this.Sender = Sender.getValue();
            this.Receiver = Receiver.getValue();
            this.money = money.getValue();
            this.Timestamp = Timestamp.getValue();
            this.TransferID = TransferID.getValue();
            this.remark = remark.getValue();
        }

        public Struct0(String Sender, String Receiver, BigInteger money, BigInteger Timestamp, String TransferID, String remark) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Address(Sender),new org.fisco.bcos.sdk.abi.datatypes.Address(Receiver),new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Timestamp),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(TransferID),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark));
            this.Sender = Sender;
            this.Receiver = Receiver;
            this.money = money;
            this.Timestamp = Timestamp;
            this.TransferID = TransferID;
            this.remark = remark;
        }
    }

    public static class InsertTableEventResponse {
        public TransactionReceipt.Logs log;

        public String tName;

        public BigInteger ProjectID;

        public String Sender;

        public String Receiver;

        public BigInteger money;

        public BigInteger Timestamp;

        public String TransferID;

        public String remark;
    }
}
