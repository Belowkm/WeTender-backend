import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Enterprise extends Contract {
    public static final String[] BINARY_ARRAY = {};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b5060405162005c3338038062005c338339810180604052620000379190810190620001ce565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600190805190602001906200008f929190620000c1565b508060029080519060200190620000a8929190620000c1565b50600060038190555060006004819055505050620002d2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010457805160ff191683800117855562000135565b8280016001018555821562000135579182015b828111156200013457825182559160200191906001019062000117565b5b50905062000144919062000148565b5090565b6200016d91905b80821115620001695760008160009055506001016200014f565b5090565b90565b600082601f83011215156200018457600080fd5b81516200019b62000195826200026f565b62000241565b91508082526020830160208301858383011115620001b857600080fd5b620001c58382846200029c565b50505092915050565b60008060408385031215620001e257600080fd5b600083015167ffffffffffffffff811115620001fd57600080fd5b6200020b8582860162000170565b925050602083015167ffffffffffffffff8111156200022957600080fd5b620002378582860162000170565b9150509250929050565b6000604051905081810181811067ffffffffffffffff821117156200026557600080fd5b8060405250919050565b600067ffffffffffffffff8211156200028757600080fd5b601f19601f8301169050602081019050919050565b60005b83811015620002bc5780820151818401526020810190506200029f565b83811115620002cc576000848401525b50505050565b61595180620002e26000396000f3006080604052600436106200014b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063089f59bb14620001505780630d8f125f14620001805780630dd27b9b14620001c45780631e593f7014620001f257806332e3a17e14620002365780634814626d14620002665780634b115ab01462000294578063536f110614620002c257806358687d4214620002f057806368e7e06c146200031e578063745bc01d146200034c57806382e1065e146200039057806382e9d0f614620003d45780639240f80914620004025780639316cef91462000430578063a3fe514a1462000474578063b1265dd814620004a2578063b450118514620004d2578063c5a4e1c91462000500578063c81a3a001462000544578063cb46da791462000574578063e3a80c2d14620005b8578063f9bd1adb14620005fc575b600080fd5b3480156200015d57600080fd5b506200016862000640565b60405162000177919062002cca565b60405180910390f35b3480156200018d57600080fd5b50620001ac6004803603620001a691908101906200264d565b620006e2565b604051620001bb919062002c79565b60405180910390f35b348015620001d157600080fd5b50620001f06004803603620001ea919081019062002823565b620007be565b005b348015620001ff57600080fd5b506200021e60048036036200021891908101906200264d565b62000a31565b6040516200022d919062002c5c565b60405180910390f35b3480156200024357600080fd5b506200024e62000a64565b6040516200025d919062002d78565b60405180910390f35b3480156200027357600080fd5b506200029260048036036200028c919081019062002823565b62000a6a565b005b348015620002a157600080fd5b50620002c06004803603620002ba919081019062002788565b62000cdd565b005b348015620002cf57600080fd5b50620002ee6004803603620002e8919081019062002892565b62000f4d565b005b348015620002fd57600080fd5b506200031c6004803603620003169190810190620026a5565b6200107f565b005b3480156200032b57600080fd5b506200034a600480360362000344919081019062002788565b620010e9565b005b3480156200035957600080fd5b506200037860048036036200037291908101906200264d565b6200136c565b60405162000387919062002be7565b60405180910390f35b3480156200039d57600080fd5b50620003bc6004803603620003b691908101906200264d565b6200139f565b604051620003cb919062002c38565b60405180910390f35b348015620003e157600080fd5b50620004006004803603620003fa9190810190620027e2565b62001480565b005b3480156200040f57600080fd5b506200042e600480360362000428919081019062002788565b62001517565b005b3480156200043d57600080fd5b506200045c60048036036200045691908101906200264d565b6200178a565b6040516200046b919062002d78565b60405180910390f35b3480156200048157600080fd5b50620004a060048036036200049a919081019062002719565b62001866565b005b348015620004af57600080fd5b50620004ba62001ad9565b604051620004c9919062002cca565b60405180910390f35b348015620004df57600080fd5b50620004fe6004803603620004f8919081019062002823565b62001b7b565b005b3480156200050d57600080fd5b506200052c60048036036200052691908101906200264d565b62001faa565b6040516200053b919062002d78565b60405180910390f35b3480156200055157600080fd5b506200055c62002086565b6040516200056b919062002d78565b60405180910390f35b3480156200058157600080fd5b50620005a060048036036200059a91908101906200264d565b6200208c565b604051620005af919062002d78565b60405180910390f35b348015620005c557600080fd5b50620005e46004803603620005de91908101906200264d565b62002168565b604051620005f3919062002c38565b60405180910390f35b3480156200060957600080fd5b506200062860048036036200062291908101906200264d565b62002249565b60405162000637919062002d78565b60405180910390f35b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620006da5780601f10620006ae57610100808354040283529160200191620006da565b820191906000526020600020905b815481529060010190602001808311620006bc57829003601f168201915b505050505081565b60006006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bef03f2b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200077c57600080fd5b505af115801562000791573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620007b7919081019062002621565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000852576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620008499062002d56565b60405180910390fd5b60056006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b8fbc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620008ec57600080fd5b505af115801562000901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000927919081019062002679565b1415156200096c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620009639062002d34565b60405180910390fd5b6006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dfd2baec83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620009f892919062002d95565b600060405180830381600087803b15801562000a1357600080fd5b505af115801562000a28573d6000803e3d6000fd5b50505050505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000afe576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162000af59062002d56565b60405180910390fd5b60056006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b8fbc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000b9857600080fd5b505af115801562000bad573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000bd3919081019062002679565b14151562000c18576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162000c0f9062002d34565b60405180910390fd5b6006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa0370a683836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000ca492919062002d95565b600060405180830381600087803b15801562000cbf57600080fd5b505af115801562000cd4573d6000803e3d6000fd5b50505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffff","ffffffffffffffffffffffffffff1614151562000d71576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162000d689062002d56565b60405180910390fd5b60046006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b8fbc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000e0b57600080fd5b505af115801562000e20573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000e46919081019062002679565b14151562000e8b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162000e829062002d34565b60405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d92cba4826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000f15919062002cee565b600060405180830381600087803b15801562000f3057600080fd5b505af115801562000f45573d6000803e3d6000fd5b505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000fe1576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162000fd89062002d56565b60405180910390fd5b62000fee85838362001b7b565b83838362000ffb62002325565b620010099392919062002dc9565b604051809103906000f08015801562001026573d6000803e3d6000fd5b506006600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b826005600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060036000815480929190600101919050555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200117d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620011749062002d56565b60405180910390fd5b60026005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b8fbc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200121757600080fd5b505af11580156200122c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062001252919081019062002679565b14151562001297576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016200128e9062002d34565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc9739fe826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162001321919062002cee565b600060405180830381600087803b1580156200133c57600080fd5b505af115801562001351573d6000803e3d6000fd5b50505050600360008154809291906001900391905055505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344b298526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156200143957600080fd5b505af11580156200144e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250620014799190810190620025dc565b9050919050565b600081111515620014c8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620014bf9062002d12565b60405180910390fd5b806004600082825401925050819055507fe6ce64459da3f7f833733d0eeb8f60419afd0c3070bb568efe30f4c0a4ca0d7482826040516200150b92919062002e0d565b60405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620015ab576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620015a29062002d56565b60405180910390fd5b60036006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b8fbc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200164557600080fd5b505af11580156200165a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062001680919081019062002679565b141515620016c5576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620016bc9062002d34565b60405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f4579486000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200175292919062002c96565b600060405180830381600087803b1580156200176d57600080fd5b505af115801562001782573d6000803e3d6000fd5b505050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b0d55e16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200182457600080fd5b505af115801562001839573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200185f919081019062002679565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620018fa576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620018f19062002d56565b60405180910390fd5b60006006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b8fbc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200199457600080fd5b505af1158015620019a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620019cf919081019062002679565b14151562001a14576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162001a0b9062002d34565b60405180910390fd5b6006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398eeb4df83836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162001aa092919062002c04565b600060405180830381600087803b15801562001abb57600080fd5b505af115801562001ad0573d6000803e3d6000fd5b50505050505050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562001b735780601f1062001b475761010080835404028352916020019162001b73565b820191906000526020600020905b81548152906001019060200180831162001b5557829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562001c0f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162001c069062002d56565b60405180910390fd5b60016005600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b8fbc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562001ca957600080fd5b505af115801562001cbe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062001ce4919081019062002679565b148062001dc3575060026005600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffff","","","ffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906107469291906118da565b505050508260046000828254019250508190555060046002819055507fc2933a6d21f65a42477fae15e87e01a58252ece9cd07cf2a52b5cc87f9a23f49336004600042868660405161079d96959493929190611eba565b60405180910390a1505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b6000600254905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610872576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161086990612089565b60405180910390fd5b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358687d426000543085856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161093294939291906120c4565b600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b505050506001600281905550600560a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600181526020016000815260200142815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190610a8c9291906118da565b505050507fc2933a6d21f65a42477fae15e87e01a58252ece9cd07cf2a52b5cc87f9a23f493360016000428686604051610acb96959493929190611da6565b60405180910390a1505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b6a576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610b6190612089565b60405180910390fd5b600560a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600581526020016000815260200142815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190610c8a9291906118da565b5050505060056002819055507fc2933a6d21f65a42477fae15e87e01a58252ece9cd07cf2a52b5cc87f9a23f493360056000428686604051610cd196959493929190611f16565b60405180910390a15050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d735780601f10610d4857610100808354040283529160200191610d73565b820191906000526020600020905b815481529060010190602001808311610d5657829003601f168201915b505050505081565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610e0490612089565b60405180910390fd5b600560a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600381526020016000815260200142815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190610f2d9291906118da565b5050505060036002819055507fc2933a6d21f65a42477fae15e87e01a58252ece9cd07cf2a52b5cc87f9a23f493360036000428686604051610f7496959493929190611e5e565b60405180910390a15050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611014576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161100b90612089565b60405180910390fd5b60045460035403905090565b60058181548110151561102f57fe5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111135780601f106110e857610100808354040283529160200191611113565b820191906000526020600020905b8154815290600101906020018083116110f657829003601f168201915b5050505050905085565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111d5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016111cc90612089565b60405180910390fd5b600560a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016006815260200185815260200142815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906112f49291906118da565b50505050826004600082825401925050819055506006600281905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358687d426000543085856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161138f94939291906120c4565b600060405180830381600087803b1580156113a957600080fd5b505af11580156113bd573d6000803e3d6000fd5b505050507fc2933a6d21f65a42477fae15e87e01a58252ece9cd07cf2a52b5cc87f9a23f49336006854286866040516113fb96959493929190611fce565b60405180910390a1505050565b60025481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114a0576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161149790612089565b60405180910390fd5b600560a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016005815260200185815260200142815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906115bf9291906118da565b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382e9d0f6600054856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161163e929190612104565b600060405180830381600087803b15801561165857600080fd5b505af115801561166c573d6000803e3d6000fd5b50505050826004600082825401925050819055507fc2933a6d21f65a42477fae15e87e01a58252ece9cd07cf2a52b5cc87f9a23f49336005854286866040516116ba96959493929190611f72565b60405180910390a1505050565b600760009054906101000a900473ffffffffffffffff","ffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611759576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161175090612089565b60405180910390fd5b600560a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016002815260200185815260200142815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906118789291906118da565b5050505082600460008282540192505081905550600280819055507fc2933a6d21f65a42477fae15e87e01a58252ece9cd07cf2a52b5cc87f9a23f49336002854286866040516118cd96959493929190611e02565b60405180910390a1505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061191b57805160ff1916838001178555611949565b82800160010185558215611949579182015b8281111561194857825182559160200191906001019061192d565b5b509050611956919061195a565b5090565b61197c91905b80821115611978576000816000905550600101611960565b5090565b90565b600061198b8235612191565b905092915050565b60008083601f84011215156119a757600080fd5b8235905067ffffffffffffffff8111156119c057600080fd5b6020830191508360018202830111156119d857600080fd5b9250929050565b60006119eb82356121b1565b905092915050565b600080600060408486031215611a0857600080fd5b6000611a168682870161197f565b935050602084013567ffffffffffffffff811115611a3357600080fd5b611a3f86828701611993565b92509250509250925092565b60008060208385031215611a5e57600080fd5b600083013567ffffffffffffffff811115611a7857600080fd5b611a8485828601611993565b92509250509250929050565b600060208284031215611aa257600080fd5b6000611ab0848285016119df565b91505092915050565b600080600060408486031215611ace57600080fd5b6000611adc868287016119df565b935050602084013567ffffffffffffffff811115611af957600080fd5b611b0586828701611993565b92509250509250925092565b611b1a8161215d565b82525050565b6000611b2b8261213a565b80845260208401935083602082028501611b448561212d565b60005b84811015611b7d578383038852611b5f838351611cac565b9250611b6a82612150565b9150602088019750600181019050611b47565b508196508694505050505092915050565b611b97816121bb565b82525050565b611ba68161217d565b82525050565b611bb5816121cd565b82525050565b611bc4816121df565b82525050565b611bd3816121f1565b82525050565b611be281612203565b82525050565b611bf181612215565b82525050565b611c0081612227565b82525050565b611c0f81612239565b82525050565b6000828452602084019350611c2b83858461224b565b611c348361228d565b840190509392505050565b6000611c4a82612145565b808452611c5e81602086016020860161225a565b611c678161228d565b602085010191505092915050565b6000600a82527fe697a0e69d83e9999021000000000000000000000000000000000000000000006020830152604082019050919050565b600060a083016000830151611cc46000860182611b11565b506020830151611cd76020860182611b9d565b506040830151611cea6040860182611d22565b506060830151611cfd6060860182611d22565b5060808301518482036080860152611d158282611c3f565b9150508091505092915050565b611d2b81612187565b82525050565b6000602082019050611d466000830184611b11565b92915050565b600060a082019050611d616000830188611b11565b611d6e6020830187611b9d565b611d7b6040830186611d22565b611d886060830185611d22565b8181036080830152611d9a8184611c3f565b90509695505050505050565b600060a082019050611dbb6000830189611b11565b611dc86020830188611bbb565b611dd56040830187611bac565b611de26060830186611d22565b8181036080830152611df5818486611c15565b9050979650505050505050565b600060a082019050611e176000830189611b11565b611e246020830188611bca565b611e316040830187611d22565b611e3e6060830186611d22565b8181036080830152611e51818486611c15565b9050979650505050505050565b600060a082019050611e736000830189611b11565b611e806020830188611bd9565b611e8d6040830187611bac565b611e9a6060830186611d22565b8181036080830152611ead818486611c15565b9050979650505050505050565b600060a082019050611ecf6000830189611b11565b611edc6020830188611be8565b611ee96040830187611bac565b611ef66060830186611d22565b8181036080830152611f09818486611c15565b9050979650505050505050565b600060a082019050611f2b6000830189611b11565b611f386020830188611bf7565b611f456040830187611bac565b611f526060830186611d22565b8181036080830152611f65818486611c15565b9050979650505050505050565b600060a082019050611f876000830189611b11565b611f946020830188611bf7565b611fa16040830187611d22565b611fae6060830186611d22565b8181036080830152611fc1818486611c15565b9050979650505050505050565b600060a082019050611fe36000830189611b11565b611ff06020830188611c06565b611ffd6040830187611d22565b61200a6060830186611d22565b818103608083015261201d818486611c15565b9050979650505050505050565b600060208201905081810360008301526120448184611b20565b905092915050565b60006020820190506120616000830184611b9d565b92915050565b600060208201905081810360008301526120818184611c3f565b905092915050565b600060208201905081810360008301526120a281611c75565b9050919050565b60006020820190506120be6000830184611d22565b92915050565b60006060820190506120d96000830187611d22565b6120e66020830186611b8e565b81810360408301526120f9818486611c15565b905095945050505050565b60006040820190506121196000830185611d22565b6121266020830184611d22565b9392505050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006121c68261215d565b9050919050565b60006121d882612187565b9050919050565b60006121ea8261217d565b9050919050565b60006121fc8261217d565b9050919050565b600061220e8261217d565b9050919050565b60006122208261217d565b9050919050565b60006122328261217d565b9050919050565b60006122448261217d565b9050919050565b82818337600083830152505050565b60005b8381101561227857808201518184015260208101905061225d565b83811115612287576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203102494f61a5bb65675aaedb7f2a9466b3ccf0d16369f4b0498ed76e9ef43d526c6578706572696d656e74616cf50037a265627a7a723058207978bab18f6ff3161a013616dfb8a128b7fa2ee07c428400cee2391b06866dc56c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"etp_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"}],\"name\":\"getRev_etp\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"AfterMarket_etp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proj_etp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"Salary_etp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"Work_etp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"},{\"name\":\"ProjectName_etp\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"CreateProj_etp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"name\":\"ProjectAddr\",\"type\":\"address\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"AddProj\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"Finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proj\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"}],\"name\":\"getTraceInfo_etp\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"int256\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"_data\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"AddProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"Pass_etp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"Deal_etp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etp_id\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"Build\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"}],\"name\":\"getPrice_etp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"num\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ProjectID\",\"type\":\"uint256\"}],\"name\":\"getTraceInfo\",\"outputs\":[{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"int256\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"_data\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ProjectID_etp\",\"type\":\"uint256\"}],\"name\":\"getStatus_etp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"addProfit\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ETP_NAME = "etp_name";

    public static final String FUNC_GETREV_ETP = "getRev_etp";

    public static final String FUNC_AFTERMARKET_ETP = "AfterMarket_etp";

    public static final String FUNC_PROJ_ETP = "proj_etp";

    public static final String FUNC_PROFIT = "profit";

    public static final String FUNC_SALARY_ETP = "Salary_etp";

    public static final String FUNC_WORK_ETP = "Work_etp";

    public static final String FUNC_CREATEPROJ_ETP = "CreateProj_etp";

    public static final String FUNC_ADDPROJ = "AddProj";

    public static final String FUNC_FINISH = "Finish";

    public static final String FUNC_PROJ = "proj";

    public static final String FUNC_GETTRACEINFO_ETP = "getTraceInfo_etp";

    public static final String FUNC_ADDPROFIT = "AddProfit";

    public static final String FUNC_PASS_ETP = "Pass_etp";

    public static final String FUNC_GETPRICE = "getPrice";

    public static final String FUNC_DEAL_ETP = "Deal_etp";

    public static final String FUNC_ETP_ID = "etp_id";

    public static final String FUNC_BUILD = "Build";

    public static final String FUNC_GETPRICE_ETP = "getPrice_etp";

    public static final String FUNC_NUM = "num";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETTRACEINFO = "getTraceInfo";

    public static final String FUNC_GETSTATUS_ETP = "getStatus_etp";

    public static final Event ADDPROFIT_EVENT = new Event("addProfit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Enterprise(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String etp_name() throws ContractException {
        final Function function = new Function(FUNC_ETP_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getRev_etp(BigInteger ProjectID_etp) throws ContractException {
        final Function function = new Function(FUNC_GETREV_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt AfterMarket_etp(BigInteger ProjectID_etp, BigInteger money, String remark) {
        final Function function = new Function(
                FUNC_AFTERMARKET_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] AfterMarket_etp(BigInteger ProjectID_etp, BigInteger money, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_AFTERMARKET_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAfterMarket_etp(BigInteger ProjectID_etp, BigInteger money, String remark) {
        final Function function = new Function(
                FUNC_AFTERMARKET_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, String> getAfterMarket_etpInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AFTERMARKET_ETP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public String proj_etp(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_PROJ_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger profit() throws ContractException {
        final Function function = new Function(FUNC_PROFIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt Salary_etp(BigInteger ProjectID_etp, BigInteger money, String remark) {
        final Function function = new Function(
                FUNC_SALARY_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Salary_etp(BigInteger ProjectID_etp, BigInteger money, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SALARY_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSalary_etp(BigInteger ProjectID_etp, BigInteger money, String remark) {
        final Function function = new Function(
                FUNC_SALARY_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, String> getSalary_etpInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SALARY_ETP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt Work_etp(BigInteger ProjectID_etp, String remark) {
        final Function function = new Function(
                FUNC_WORK_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Work_etp(BigInteger ProjectID_etp, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_WORK_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForWork_etp(BigInteger ProjectID_etp, String remark) {
        final Function function = new Function(
                FUNC_WORK_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getWork_etpInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_WORK_ETP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt CreateProj_etp(BigInteger ProjectID, BigInteger ProjectID_etp, String ProjectName_etp, BigInteger money, String remark) {
        final Function function = new Function(
                FUNC_CREATEPROJ_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ProjectName_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] CreateProj_etp(BigInteger ProjectID, BigInteger ProjectID_etp, String ProjectName_etp, BigInteger money, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROJ_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ProjectName_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProj_etp(BigInteger ProjectID, BigInteger ProjectID_etp, String ProjectName_etp, BigInteger money, String remark) {
        final Function function = new Function(
                FUNC_CREATEPROJ_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ProjectName_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, BigInteger, String, BigInteger, String> getCreateProj_etpInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROJ_ETP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, BigInteger, String, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public TransactionReceipt AddProj(BigInteger ProjectID, String ProjectAddr, String remark) {
        final Function function = new Function(
                FUNC_ADDPROJ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(ProjectAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] AddProj(BigInteger ProjectID, String ProjectAddr, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPROJ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(ProjectAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddProj(BigInteger ProjectID, String ProjectAddr, String remark) {
        final Function function = new Function(
                FUNC_ADDPROJ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(ProjectAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getAddProjInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPROJ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt Finish(BigInteger ProjectID, String remark) {
        final Function function = new Function(
                FUNC_FINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Finish(BigInteger ProjectID, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFinish(BigInteger ProjectID, String remark) {
        final Function function = new Function(
                FUNC_FINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getFinishInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FINISH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String proj(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_PROJ, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public DynamicArray<Struct0> getTraceInfo_etp(BigInteger ProjectID_etp) throws ContractException {
        final Function function = new Function(FUNC_GETTRACEINFO_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt AddProfit(BigInteger ProjectID, BigInteger money) {
        final Function function = new Function(
                FUNC_ADDPROFIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] AddProfit(BigInteger ProjectID, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPROFIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddProfit(BigInteger ProjectID, BigInteger money) {
        final Function function = new Function(
                FUNC_ADDPROFIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getAddProfitInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPROFIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt Pass_etp(BigInteger ProjectID_etp, String remark) {
        final Function function = new Function(
                FUNC_PASS_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Pass_etp(BigInteger ProjectID_etp, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PASS_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPass_etp(BigInteger ProjectID_etp, String remark) {
        final Function function = new Function(
                FUNC_PASS_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getPass_etpInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PASS_ETP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public BigInteger getPrice(BigInteger ProjectID) throws ContractException {
        final Function function = new Function(FUNC_GETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt Deal_etp(BigInteger ProjectID_etp, String target, String remark) {
        final Function function = new Function(
                FUNC_DEAL_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(target), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Deal_etp(BigInteger ProjectID_etp, String target, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEAL_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(target), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeal_etp(BigInteger ProjectID_etp, String target, String remark) {
        final Function function = new Function(
                FUNC_DEAL_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(target), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getDeal_etpInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEAL_ETP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public String etp_id() throws ContractException {
        final Function function = new Function(FUNC_ETP_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt Build(BigInteger ProjectID, BigInteger money, String remark) {
        final Function function = new Function(
                FUNC_BUILD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Build(BigInteger ProjectID, BigInteger money, String remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUILD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuild(BigInteger ProjectID, BigInteger money, String remark) {
        final Function function = new Function(
                FUNC_BUILD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, String> getBuildInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUILD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public BigInteger getPrice_etp(BigInteger ProjectID_etp) throws ContractException {
        final Function function = new Function(FUNC_GETPRICE_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger num() throws ContractException {
        final Function function = new Function(FUNC_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getStatus(BigInteger ProjectID) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<Struct0> getTraceInfo(BigInteger ProjectID) throws ContractException {
        final Function function = new Function(FUNC_GETTRACEINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public BigInteger getStatus_etp(BigInteger ProjectID_etp) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS_ETP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ProjectID_etp)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<AddProfitEventResponse> getAddProfitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDPROFIT_EVENT, transactionReceipt);
        ArrayList<AddProfitEventResponse> responses = new ArrayList<AddProfitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddProfitEventResponse typedResponse = new AddProfitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ProjectID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.remark = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddProfitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDPROFIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddProfitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDPROFIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Enterprise load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Enterprise(contractAddress, client, credential);
    }

    public static Enterprise deploy(Client client, CryptoKeyPair credential, String id, String name) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name)));
        return deploy(Enterprise.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class Struct0 extends DynamicStruct {
        public String addr;

        public BigInteger status;

        public BigInteger money;

        public BigInteger timestamp;

        public String remark;

        public Struct0(Address addr, Int256 status, Uint256 money, Uint256 timestamp, Utf8String remark) {
            super(addr,status,money,timestamp,remark);
            this.addr = addr.getValue();
            this.status = status.getValue();
            this.money = money.getValue();
            this.timestamp = timestamp.getValue();
            this.remark = remark.getValue();
        }

        public Struct0(String addr, BigInteger status, BigInteger money, BigInteger timestamp, String remark) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(status),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(money),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(timestamp),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(remark));
            this.addr = addr;
            this.status = status;
            this.money = money;
            this.timestamp = timestamp;
            this.remark = remark;
        }
    }

    public static class AddProfitEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ProjectID;

        public BigInteger money;

        public String remark;
    }
}
